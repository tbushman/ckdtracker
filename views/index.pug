extends layout
block page
block content
	
	div.col-xs-12(id="chart_"+result[0].patient+"", class='vis')
		div.tt.panel.panel-sm(style="position: absolute;")
			
	
	script(type="text/javascript").
		$(document).on('click', '.submit', function(){
			var id = $(this).attr('id');
			$('#modal_'+id.split('submit')[1]+'').children('form')[0].submit();
		})
		$(document).on('change', '.revealvalue', function(){
			//e.preventDefault()
			var id = $(this).attr('id');
			var key = id.split('reveal_')[1];
			if (!$(this).attr('checked')) {
				$.post('/api/reveal/'+'!{result[0].patient}'+'/'+key+'/', function(){
					window.location.href = '/';
				});
			} else {
				$.post('/api/hide/'+'!{result[0].patient}'+'/'+key+'/', function(){
					window.location.href = '/';
				});
			}
		})
		
		$('#editdate input').on('change', function(er){
			$('#msg-currentdate').html(
				'<span>'+
					new Date($(this).val()).getFullYear() +
				'<span>'+
				'<span> - </span>' + 
				'<span>'+ 
					(new Date($(this).val()).getMonth() + 1) +
				'<span> - </span>' +
				'<span>'+ 
					(new Date($(this).val()).getDate()) +
				'<span>'+
					'<h6>'+ 
						'<span>'+ 
							new Date($(this).val())+
						'</span></h6></span>')
		});
		
		document.addEventListener('DOMContentLoaded', function() {
			
			var myWidth = 0, myHeight = 0;
			if( typeof( window.innerWidth ) == 'number' ) {
					//Non-IE
				myWidth = window.innerWidth - 50;
				myHeight = window.innerHeight - 50;
			} else if( document.documentElement && ( document.documentElement.clientWidth || document.documentElement.clientHeight ) ) {
				//IE 6+ in 'standards compliant mode'
				myWidth = document.documentElement.clientWidth - 50;
				myHeight = document.documentElement.clientHeight - 50;
			} else if( document.body && ( document.body.clientWidth || document.body.clientHeight ) ) {
				//IE 4 compatible
				myWidth = document.body.clientWidth - 50;
				myHeight = document.body.clientHeight - 50;
			} else {
				myWidth = 800;
				myHeight = 400;
			}
			if ('!{JSON.stringify(dots)}' !== '') {
				$('select').on('change', function(e){
					console.log(e.target.children)
					if ('!{result}' !== '') {
						$(e.target).children('option').each(function(i, opt){
							console.log(opt.selected)
							var ind = parseInt(opt.getAttribute('id').split('selected_')[1], 10)
							if (opt.selected) {
								console.log(ind)
								
								window.location.href = '/api/'+'!{result[0].patient}'+'/'+ind+'/true';
								//$.post('/api/'+result[0].patient+'/'+i+'')
							}
						})
					}
				});
				//console.log($('.navbar-toggle').css('display'))
				if ('!{edit}' === 'true') {
					console.log($('.navbar-toggle').css('display'))
					if ($('.navbar-toggle').css('display') === 'block') {
						console.log($('#navbar-toggle'))
						$('#navbar-toggle').click();
					}
					$($('#hideedit').click())
					
				}
				graphIt(!{JSON.stringify(data)}, !{JSON.stringify(result)}, !{JSON.stringify(dots)}, myWidth, myHeight);
				
			}
			
		});
		function graphIt(datas, dat, dots, w, h){
			// set up size
			var margin = { top: 20, right: 20, bottom: 140, left: 40};
			var width = w - margin.left - margin.right;
			var height = h - margin.top - margin.bottom;
			// set up chart
			var color = d3.scaleOrdinal(d3.schemeCategory10);
			var colorD = d3.map(dat, function (d) { return d3.map(d.data, function(c){return c.name}); })
			var colorB = d3.map(dat, function (d) { return d.key });
			color.domain([colorB, colorD]);
			//.range([0, d3.variance([colorB,colorD])]);

			var svg = d3.select("#chart_"+'!{result[0].patient}'+"")
			.append("svg").attr("width", width + margin.left + margin.right)
			.attr("height", height + margin.top + margin.bottom).append("g")
			.attr("transform", "translate(" + margin.left + "," + margin.top + ")");

			function getDate(d) {
				return new Date(d);
			}
			var minDate = d3.min(dots, function(c) { return getDate(c.date); });
			var maxDate = d3.max(dots, function(c) { return getDate(c.date); });
			var minVal = d3.min(dots, function(c) { return c.val; });
			var maxVal = d3.max(dots, function(c) { return c.val; });
			var absMinDate = d3.min(datas[0].data, function(c){return getDate(c.date)})
			var absMaxDate = d3.max(datas[0].data, function(c){return getDate(c.date)})
			var sortedDataByDate = dat[0].data.sort(function(a,b){
				if (new Date(a.date)<new Date(b.date)) {
					return a.date - b.date;
				} else {
					return b.date - a.date;
				}
			});

			$('#start_date').datepicker({
				startDate: new Date(absMinDate),
				endDate: new Date(absMaxDate),
				setDates: sortedDataByDate.map(function (v){getDate(v.date)}),
				keepEmptyValues: false,
				autoclose: true,
				//defaultViewDate: new Date(minDate),
				format: {
				
					toDisplay: function (date, format, language) {
						var d = new Date(date);
						return d.toISOString();
					},
					toValue: function (date, format, language) {
						var d = new Date(date);
						return new Date(d);
					}
				}
			})
			$('#end_date').datepicker({
				keyboardNavigation: false,
				autoclose: true,
				startDate: new Date(minDate),
				endDate: new Date(maxDate),
				defaultViewDate: new Date(maxDate)
			});
			$('.daterange').on('change', function(e){
				var begin = //moment((
					$('.range0').val()
				//)).utc().format();
				var end = //moment((
					$('.range1').val()
				//)).utc().format();
				if (begin && end) {
					window.location.href = '/daterange/'+'!{result[0].patient}'+'/'+begin+'/'+end+''
				}
			})
			$('#new_date').datepicker({
				keyboardNavigation: false,
				autoclose: true,
				endDate: new Date(),
				format: {
				
					toDisplay: function (date, format, language) {
						var d = new Date(date);
						return d.toISOString();
					},
					toValue: function (date, format, language) {
						var d = new Date(date);
						return new Date(d);
					}
				}
			});

			
			// xscale
			var x = d3.scaleTime().range([0, width]);
			var y = d3.scaleLinear().range([height, 0]);

			var line = d3.line()
			.x(function (d, i) {
				return x(getDate(d.date));
			})
			.y(function (d, i) {
				return y(d.val);
			});
			var rangeLineHigh = d3.line()
			.x(function(d){
				return x(getDate(d.date))
			})
			.y(function(d){
				return y(d.high)
			})
			var rangeLineLow = d3.line()
			.x(function(d){
				return x(getDate(d.date))
			})
			.y(function(d){
				return y(d.low)
			})
			x.domain(
				[minDate, maxDate]
			)
			y.domain(
				[minVal, maxVal]
			);

			svg.append("g").attr("class", "x axis")
			.attr("transform", "translate(0," + height + ")")
			.call(d3.axisBottom(x));
			svg.append("g").attr("class", "y axis")
			.call(d3.axisLeft(y));
				
			var mKeys = Object.keys(dat);
			var measurement = 
				svg.selectAll(".measurement")
				.data(dat)
				.enter().append("g")
				.attr("class", function(d){return "measurement_"+d.key});
			
			var path = measurement.append("path")
				.attr("class", "line")
				.attr("d", function (d, i) {
					return line(d.data);
				}).style("stroke", function (d, i) {
					return color(d.key);
				})
				.on("mouseover", function(d, i){
					var rangeline = $(this).siblings('.rangeline')
					$(rangeline).attr("opacity", 1);
					$(this).siblings('.rangelabel').attr("opacity", 1);
				})
				.on("mouseout", function(d){
					var rangeline = $(this).siblings('.rangeline')
					$(rangeline).attr("opacity", 0);
					$(this).siblings('.rangelabel').attr("opacity", 0);
				});
			
			var rangepathHigh = measurement.append("path")
				.attr("class", "rangeline")
				.attr("d", function(d){
					return rangeLineHigh(d.data)
				})
				.attr("stroke", "#999999")
				.attr("stroke-width", "1")
				.attr("stroke-dasharray", "4,3")
				.attr("opacity", 0);
			
			var rangepathLow = measurement.append("path")
				.attr("class", "rangeline")
				.attr("d", function(d){
					return rangeLineLow(d.data)
				})
				.attr("stroke", "#999999")
				.attr("stroke-width", "1")
				.attr("stroke-dasharray", "4,3")
				.attr("opacity", 0);
				
			var thispath = path._groups[0];
			for (var i = 0; i < thispath.length; i++) {
				var totalLength = thispath[i].getTotalLength();
				d3.select(thispath[i])
				.attr("stroke-dasharray", totalLength + " " + totalLength )
				.attr("stroke-dashoffset", totalLength)
				.transition().duration(2000)
				.attr("stroke-dashoffset", 0)
			}

			var label = measurement.append("text")
				.attr("x", 3)
				.attr("y", function(d, i){
					return y(d.data[0].val)
				})
				.attr("dy", ".35em")
				.text(function (d, i) {
					return d.key.toUpperCase();
				});
			
			var rangeLabelHigh = measurement.append("text")
				.attr("class", "rangelabel")
				.attr("x", width - margin.right - 10)
				.attr("y", function(d, i){
					return y(d.data[0].high)
				})
				.attr("dy", "-5px")
				.attr("opacity", 0)
				.text(function (d, i) {
					return d.data[0].high +""+ d.data[0].unit;
				})
				.attr("style", "font-size: 10px;");
			
			var rangeLabelLow = measurement.append("text")
				.attr("class", "rangelabel")
				.attr("x", width - margin.right - 10)
				.attr("y", function(d, i){
					return y(d.data[0].low)
				})
				.attr("dy", "10px")
				.attr("opacity", 0)
				.text(function (d, i) {
					return d.data[0].low +""+ d.data[0].unit;
				})
				.attr("style", "font-size: 10px;");

			var dot = 
			svg.selectAll(".dot")
			.data(dots)
			.enter().append("svg:circle")
			.attr("class", "dot")
			.attr("cx", function(d, i) {
				return x(getDate(d.date))
			})
			.attr("cy", function(d, i) { 
				return y(d.val)
			})
			.attr("r", 6)
			.attr("fill", function(d){
				return color(d.name)
			})
			.on("mouseover", function(d, i){
				var getThisDate = getDate(d.date);
				var displayDate = ''+(getThisDate.getMonth()+1)+'/'+getThisDate.getDate()+'/'+getThisDate.getFullYear()+'';
				var displayVal = d.val.toFixed(1);
				$('.tt').html("<div class='row'><div class='date col-xs-6'>"+displayDate+"</div><div class='date col-xs-6' style='text-align: right;'>"+d.name.toUpperCase()+"</div><div class='col-xs-12'><h4 class='quote' style='color: "+color(d.name)+"!important; text-align: right;'><strong>"+displayVal+"</strong></h4></div></div>");
				$('.tt').show();
				d3.select(this).style("opacity", 1);
				
			}).on("mousemove", function(d){
				var xPosition = d3.mouse(this)[0] + margin.left;
				var yPosition = d3.mouse(this)[1] + margin.top;
				if (yPosition > height-(margin.bottom)) {
					yPosition = yPosition - (margin.bottom)
					$(".tt").css("top", (yPosition + parseFloat($('.tt').css('height').split('px')[0])+"px"))
				} else {
					$(".tt").css({"top": (yPosition)+"px"})
				}
				if (xPosition > (width - parseFloat($('.tt').css('width').split('px')[0]) )) {
					xPosition = (xPosition - parseFloat($('.tt').css('width').split('px')[0]));
					$(".tt").css({"left": xPosition+"px"});
				} else {
					$(".tt").css({"left": xPosition+"px"});
				}
			}).on("mouseout", function(d){
				d3.select(this).style("opacity", 0);
				$(".tt").hide();
			});
		}